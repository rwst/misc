From fdd148a50b31610942b21f34d36facfff892246e Mon Sep 17 00:00:00 2001
From: Ralf Stephan <ralf@ark.in-berlin.de>
Date: Wed, 23 Sep 2015 15:49:48 +0000
Subject: 19040: doctest changes

---
diff --git a/src/doc/en/tutorial/tour_functions.rst b/src/doc/en/tutorial/tour_functions.rst
index c803e40..f34656c 100644
--- a/src/doc/en/tutorial/tour_functions.rst
+++ b/src/doc/en/tutorial/tour_functions.rst
@@ -132,8 +132,9 @@ Here are some common problems, with explanations:
 The issue: ``plot(h(x), 0, 4)`` plots the line `y=x-2`, not the multi-line
 function defined by ``h``. The reason? In the command ``plot(h(x), 0, 4)``,
 first ``h(x)`` is evaluated: this means plugging the symbolic variable ``x``
-into the function ``h``. So, the inequality ``x < 2`` evaluates to ``False`` first,
-and hence ``h(x)`` evaluates to ``x - 2``. This can be seen with
+into the function ``h``. So, the inequality ``x < 2`` is evaluated, and it
+evaluates to ``False``, and hence ``h(x)`` evaluates to ``x-2``.
+This can be seen with
 
 .. link
 
diff --git a/src/sage/calculus/calculus.py b/src/sage/calculus/calculus.py
index a5d6996..16ff3a2 100644
--- a/src/sage/calculus/calculus.py
+++ b/src/sage/calculus/calculus.py
@@ -918,7 +918,9 @@ def minpoly(ex, var='x', algorithm=None, bits=None, degree=None, epsilon=0):
         sage: cos(pi/33).minpoly(algorithm='algebraic')
         x^10 + 1/2*x^9 - 5/2*x^8 - 5/4*x^7 + 17/8*x^6 + 17/16*x^5 - 43/64*x^4 - 43/128*x^3 + 3/64*x^2 + 3/128*x + 1/1024
         sage: cos(pi/33).minpoly(algorithm='numerical')
-        x^10 + 1/2*x^9 - 5/2*x^8 - 5/4*x^7 + 17/8*x^6 + 17/16*x^5 - 43/64*x^4 - 43/128*x^3 + 3/64*x^2 + 3/128*x + 1/1024
+        Traceback (most recent call last):
+        ...
+        NotImplementedError: Could not prove minimal polynomial ...
 
     Sometimes it fails, as it must given that some numbers aren't algebraic::
 
@@ -949,7 +951,6 @@ def minpoly(ex, var='x', algorithm=None, bits=None, degree=None, epsilon=0):
                 error = abs(f(aa))
                 dx = ~RR(Integer(1) << (check_bits - degree - 2))
                 expected_error = abs(f.derivative()(CC(aa))) * dx
-
                 if error < expected_error:
                     # Degree might have been an over-estimate,
                     # factor because we want (irreducible) minpoly.
diff --git a/src/sage/calculus/functional.py b/src/sage/calculus/functional.py
index 9317e7e..e3803cf 100644
--- a/src/sage/calculus/functional.py
+++ b/src/sage/calculus/functional.py
@@ -269,7 +269,7 @@ def integral(f, *args, **kwds):
          -6.9388939039072284e-17]
         sage: h.factor()
         0
-        sage: bool(h == 0)
+        sage: (h == 0).holds()
         True
     """
     try:
diff --git a/src/sage/calculus/wester.py b/src/sage/calculus/wester.py
index b251993..c038957 100644
--- a/src/sage/calculus/wester.py
+++ b/src/sage/calculus/wester.py
@@ -64,7 +64,7 @@ explicit calls to Maxima or other systems.
     sage: a = sqrt(2*sqrt(3) + 4); b = 1 + sqrt(3)
     sage: print float(a-b)
     0.0
-    sage: print bool(a == b)
+    sage: (a == b).holds()
     True
     sage: # We can, of course, do this in a quadratic field
     sage: k.<sqrt3> = QuadraticField(3)
@@ -80,7 +80,7 @@ explicit calls to Maxima or other systems.
     sage: b = 3+sqrt(2)
     sage: a, b
     (sqrt(3*sqrt(2*sqrt(-12*sqrt(-2*sqrt(2) + 3) + 5) + 3) + 14), sqrt(2) + 3)
-    sage: bool(a==b)
+    sage: (a==b).holds()
     True
     sage: abs(float(a-b)) < 1e-10
     True
@@ -126,7 +126,7 @@ explicit calls to Maxima or other systems.
     e^(1/2*x) - 1
     sage: f(x=10.0).n(53), g(x=10.0).n(53)
     (147.413159102577, 147.413159102577)
-    sage: bool(f == g)
+    sage: (f == g).holds()
     True
 
 ::
@@ -204,7 +204,7 @@ explicit calls to Maxima or other systems.
     sage: var('x,y,z')
     (x, y, z)
     sage: assume(x>=y, y>=z,z>=x)
-    sage: print bool(x==z)
+    sage: (x==z).holds()
     True
 
 ::
@@ -214,7 +214,7 @@ explicit calls to Maxima or other systems.
     sage: assume(x>y, y>0)
     sage: print list(sorted(assumptions()))
     [x > y, y > 0]
-    sage: print bool(2*x^2 > 2*y^2)
+    sage: (2*x^2 > 2*y^2).holds()
     True
     sage: forget()
     sage: print assumptions()
@@ -271,14 +271,14 @@ explicit calls to Maxima or other systems.
     sage: a = sqrt(997) - (997^3)^(1/6)
     sage: a.simplify()
     0
-    sage: bool(a == 0)
+    sage: (a == 0).holds()
     True
 
 ::
 
     sage: # (YES) Sqrt(99983)-99983^3^(1/6)=0
     sage: a = sqrt(99983) - (99983^3)^(1/6)
-    sage: bool(a==0)
+    sage: (a==0).holds()
     True
     sage: float(a)
     1.1368683772...e-13
@@ -290,7 +290,7 @@ explicit calls to Maxima or other systems.
     sage: # (YES) (2^(1/3) + 4^(1/3))^3 - 6*(2^(1/3) + 4^(1/3))-6 = 0
     sage: a = (2^(1/3) + 4^(1/3))^3 - 6*(2^(1/3) + 4^(1/3)) - 6; a
     (4^(1/3) + 2^(1/3))^3 - 6*4^(1/3) - 6*2^(1/3) - 6
-    sage: bool(a==0)
+    sage: (a==0).holds()
     True
     sage: abs(float(a)) < 1e-10
     True
@@ -308,7 +308,7 @@ explicit calls to Maxima or other systems.
     # returns True only when it can prove equality. Thus, in this case, we get
     # False even though the equality holds.
     sage: f = log(tan(x/2 + pi/4)) - arcsinh(tan(x))
-    sage: bool(f == 0)
+    sage: (f == 0).holds()
     False
     sage: [abs(float(f(x=i/10))) < 1e-15 for i in range(1,5)]
     [True, True, True, True]
@@ -329,7 +329,7 @@ explicit calls to Maxima or other systems.
     sage: f = log( (2*sqrt(r) + 1) / sqrt(4*r  + 4*sqrt(r) +  1))
     sage: f
     log((2*sqrt(r) + 1)/sqrt(4*r + 4*sqrt(r) + 1))
-    sage: bool(f == 0)
+    sage: (f == 0).holds()
     False
     sage: [abs(float(f(r=i))) < 1e-10 for i in [0.1,0.3,0.5]]
     [True, True, True]
@@ -342,7 +342,7 @@ explicit calls to Maxima or other systems.
     sage: f = (4*r+4*sqrt(r)+1)^(sqrt(r)/(2*sqrt(r)+1))*(2*sqrt(r)+1)^(2*sqrt(r)+1)^(-1)-2*sqrt(r)-1
     sage: f
     (4*r + 4*sqrt(r) + 1)^(sqrt(r)/(2*sqrt(r) + 1))*(2*sqrt(r) + 1)^(1/(2*sqrt(r) + 1)) - 2*sqrt(r) - 1
-    sage: bool(f == 0)
+    sage: (f == 0).holds()
     False
     sage: [abs(float(f(r=i))) < 1e-10 for i in [0.1,0.3,0.5]]
     [True, True, True]
diff --git a/src/sage/combinat/finite_state_machine.py b/src/sage/combinat/finite_state_machine.py
index 5764872..f84b916 100644
--- a/src/sage/combinat/finite_state_machine.py
+++ b/src/sage/combinat/finite_state_machine.py
@@ -903,9 +903,8 @@ def full_group_by(l, key=lambda x: x):
         ....:                            key=lambda i:t[i]),
         ....:                            key=lambda i:t[i]):
         ....:     print k, list(elements)
-        2/x [0]
         1/x [1]
-        2/x [2]
+        2/x [0, 2]
 
     Note that the behavior is different from ``itertools.groupby``
     because neither `1/x<2/x` nor `2/x<1/x` does hold.
@@ -3938,7 +3937,7 @@ class FiniteStateMachine(SageObject):
             sage: F = Transducer([(0, 0, p, 1), (0, 0, q, 0)],
             ....:                on_duplicate_transition=duplicate_transition_add_input)
             sage: assume(p + q == 1)
-            sage: (p + q - 1).is_zero()
+            sage: (p + q - 1 == 0).holds()
             True
             sage: F.is_Markov_chain()
             True
diff --git a/src/sage/combinat/tutorial.py b/src/sage/combinat/tutorial.py
index 40156bb..25b1276 100644
--- a/src/sage/combinat/tutorial.py
+++ b/src/sage/combinat/tutorial.py
@@ -520,7 +520,7 @@ It is trivial to verify this equation on the closed form::
     sage: equadiff.substitute_function(Cf, s0)
     doctest:...: DeprecationWarning:...
     (4*z - 1)/sqrt(-4*z + 1) + sqrt(-4*z + 1) == 0
-    sage: bool(equadiff.substitute_function(Cf, s0))
+    sage: (equadiff.substitute_function(Cf, s0)).holds()
     True
 
 .. On veut non seulement remplacer les occurences de C(z), mais
diff --git a/src/sage/functions/bessel.py b/src/sage/functions/bessel.py
index 14a98c2..67528bc 100644
--- a/src/sage/functions/bessel.py
+++ b/src/sage/functions/bessel.py
@@ -822,6 +822,16 @@ class Function_Bessel_K(BuiltinFunction):
             +infinity
             sage: bessel_K(-1, 1).n(128)
             0.60190723019723457473754000153561733926
+
+        ::
+            sage: bessel_K(1/2, pi)
+            sqrt(1/2)*e^(-pi)
+            sage: bessel_K(1/2, x)
+            bessel_K(1/2, x)
+            sage: assume(x > 0)
+            sage: bessel_K(1/2, x)
+            sqrt(1/2)*sqrt(pi)*e^(-x)/sqrt(x)
+            sage: forget()
         """
         # special identity
         from sage.symbolic.ring import SR
diff --git a/src/sage/functions/hyperbolic.py b/src/sage/functions/hyperbolic.py
index 575e4e2..f99a9d3 100644
--- a/src/sage/functions/hyperbolic.py
+++ b/src/sage/functions/hyperbolic.py
@@ -259,7 +259,7 @@ class Function_coth(HyperbolicFunction):
         """
         EXAMPLES::
 
-            sage: bool(diff(coth(x), x) == diff(1/tanh(x), x))
+            sage: (diff(coth(x), x) == diff(1/tanh(x), x)).holds()
             True
             sage: diff(coth(x), x)
             -csch(x)^2
@@ -334,7 +334,7 @@ class Function_sech(HyperbolicFunction):
         """
         EXAMPLES::
 
-            sage: bool(diff(sech(x), x) == diff(1/cosh(x), x))
+            sage: (diff(sech(x), x) == diff(1/cosh(x), x)).holds()
             True
             sage: diff(sech(x), x)
             -sech(x)*tanh(x)
@@ -407,7 +407,7 @@ class Function_csch(HyperbolicFunction):
         """
         EXAMPLES::
 
-            sage: bool(diff(csch(x), x) == diff(1/sinh(x), x))
+            sage: (diff(csch(x), x) == diff(1/sinh(x), x)).holds()
             True
             sage: diff(csch(x), x)
             -coth(x)*csch(x)
diff --git a/src/sage/functions/min_max.py b/src/sage/functions/min_max.py
index ef7d0cf..2d7b214 100644
--- a/src/sage/functions/min_max.py
+++ b/src/sage/functions/min_max.py
@@ -6,24 +6,18 @@ builtin max and min are not able to deal with variables as users might expect.
 These functions wait to evaluate if there are variables.
 
 Here you can see some differences::
-
-   sage: max(x,x^2)
-   x
-   sage: max_symbolic(x,x^2)
-   max(x, x^2)
-   sage: f(x) = max_symbolic(x,x^2); f(1/2)
-   1/2
+   
+   sage: min(3,5,x)
+   3
+   sage: min_symbolic(3,5,x)
+   min(x, 3)
 
 This works as expected for more than two entries::
 
    sage: max(3,5,x)
-   5
-   sage: min(3,5,x)
-   3
+   x
    sage: max_symbolic(3,5,x)
    max(x, 5)
-   sage: min_symbolic(3,5,x)
-   min(x, 3)
 
 """
 ###############################################################################
@@ -182,6 +176,10 @@ class MaxSymbolic(MinMax_base):
             max(x, 5)
             sage: max_symbolic([3,5,x])
             max(x, 5)
+            sage: max_symbolic(x,x^2)
+            max(x, x^2)
+            sage: f(x) = max_symbolic(x,x^2); f(1/2)
+            1/2
 
         TESTS::
 
diff --git a/src/sage/functions/trig.py b/src/sage/functions/trig.py
index a5a7545..9d1d021 100644
--- a/src/sage/functions/trig.py
+++ b/src/sage/functions/trig.py
@@ -255,7 +255,7 @@ class Function_sec(BuiltinFunction):
         """
         EXAMPLES::
 
-            sage: bool(diff(sec(x), x) == diff(1/cos(x), x))
+            sage: (diff(sec(x), x) == diff(1/cos(x), x)).holds()
             True
             sage: diff(sec(x), x)
             sec(x)*tan(x)
@@ -355,7 +355,7 @@ class Function_csc(BuiltinFunction):
         """
         EXAMPLES::
 
-            sage: bool(diff(csc(x), x) == diff(1/sin(x), x))
+            sage: (diff(csc(x), x) == diff(1/sin(x), x)).holds()
             True
             sage: diff(csc(x), x)
             -cot(x)*csc(x)
@@ -452,7 +452,7 @@ class Function_cot(BuiltinFunction):
         """
         EXAMPLES::
 
-            sage: bool(diff(cot(x), x) == diff(1/tan(x), x))
+            sage: (diff(cot(x), x) == diff(1/tan(x), x)).holds()
             True
             sage: diff(cot(x), x)
             -csc(x)^2
diff --git a/src/sage/geometry/hyperbolic_space/hyperbolic_isometry.py b/src/sage/geometry/hyperbolic_space/hyperbolic_isometry.py
index 4840c05..f874350 100644
--- a/src/sage/geometry/hyperbolic_space/hyperbolic_isometry.py
+++ b/src/sage/geometry/hyperbolic_space/hyperbolic_isometry.py
@@ -1056,10 +1056,9 @@ def mobius_transform(A, z):
     The matrix can be symbolic or can be a matrix over the real
     or complex numbers, but must be invertible::
 
-        sage: (a,b,c,d) = var('a,b,c,d');
-        sage: mobius_transform(matrix(2,[a,b,c,d]),I)
-        (I*a + b)/(I*c + d)
-
+        sage: (b,c) = var('b,c');
+        sage: mobius_transform(matrix(2,[1,b,c,b*c+1]),I)
+        (b + I)/(b*c + I*c + 1)
         sage: mobius_transform(matrix(2,[0,0,0,0]),I)
         Traceback (most recent call last):
         ...
diff --git a/src/sage/matrix/matrix_symbolic_dense.pyx b/src/sage/matrix/matrix_symbolic_dense.pyx
index 8f770e1..bb0d1c0 100644
--- a/src/sage/matrix/matrix_symbolic_dense.pyx
+++ b/src/sage/matrix/matrix_symbolic_dense.pyx
@@ -493,14 +493,14 @@ cdef class Matrix_symbolic_dense(Matrix_generic_dense):
             [(x^2 - 5*x - 2, 1)]
             sage: a = matrix(SR,[[1,0],[0,2]])
             sage: a.fcp()
-            (x - 2) * (x - 1)
+            (x - 1) * (x - 2)
             sage: [i for i in a.fcp()]
-            [(x - 2, 1), (x - 1, 1)]
+            [(x - 1, 1), (x - 2, 1)]
             sage: a = matrix(SR, 5, [1..5^2])
             sage: a.fcp()
-            (x^2 - 65*x - 250) * x^3
+            x^3 * (x^2 - 65*x - 250)
             sage: list(a.fcp())
-            [(x^2 - 65*x - 250, 1), (x, 3)]
+            [(x, 3), (x^2 - 65*x - 250, 1)]
 
         """
         from sage.symbolic.ring import SR
diff --git a/src/sage/misc/reset.pyx b/src/sage/misc/reset.pyx
index b3fd410..62543c4 100644
--- a/src/sage/misc/reset.pyx
+++ b/src/sage/misc/reset.pyx
@@ -54,12 +54,12 @@ def reset(vars=None, attached=False):
         sage: assume(x > 3)
         sage: assumptions()
         [x > 3]
-        sage: bool(x > 3)
+        sage: (x > 3).holds()
         True
         sage: reset()
         sage: assumptions()
         []
-        sage: bool(x > 3)
+        sage: (x > 3).holds()
         False
 
     """
diff --git a/src/sage/schemes/elliptic_curves/ell_generic.py b/src/sage/schemes/elliptic_curves/ell_generic.py
index 2d8d047..771b42a 100644
--- a/src/sage/schemes/elliptic_curves/ell_generic.py
+++ b/src/sage/schemes/elliptic_curves/ell_generic.py
@@ -396,7 +396,7 @@ class EllipticCurve_generic(WithEqualityById, plane_curve.ProjectiveCurve_generi
 
         This is a point on the curve::
 
-            sage: bool(temp == 0)
+            sage: (temp == 0).holds()
             True
         """
         a = [SR(x) for x in self.a_invariants()]
diff --git a/src/sage/symbolic/assumptions.py b/src/sage/symbolic/assumptions.py
index 7129ef3..bae36e1 100644
--- a/src/sage/symbolic/assumptions.py
+++ b/src/sage/symbolic/assumptions.py
@@ -325,13 +325,13 @@ def assume(*args):
     Here, we verify that for `x>0`, `\sqrt{x^2}=x`::
 
         sage: assume(x > 0)
-        sage: bool(sqrt(x^2) == x)
+        sage: (sqrt(x^2) == x).holds()
         True
 
     This will be assumed in the current Sage session until forgotten::
 
         sage: forget()
-        sage: bool(sqrt(x^2) == x)
+        sage: (sqrt(x^2) == x).holds()
         False
 
     Another major use case is in taking certain integrals and limits
@@ -406,19 +406,19 @@ def assume(*args):
 
         sage: x, y, z = var('x, y, z')
         sage: assume(x>=y,y>=z,z>=x)
-        sage: bool(x==z)
+        sage: (x==z).holds()
         True
-        sage: bool(z<x)
+        sage: (z<x).holds()
         False
-        sage: bool(z>y)
+        sage: (z>y).holds()
         False
-        sage: bool(y==z)
+        sage: (y==z).holds()
         True
         sage: forget()
         sage: assume(x>=1,x<=1)
-        sage: bool(x==1)
+        sage: (x==1).holds()
         True
-        sage: bool(x>1)
+        sage: (x>1).holds()
         False
         sage: forget()
 
@@ -575,14 +575,14 @@ def _forget_all():
         sage: var('x,y')
         (x, y)
         sage: assume(x > 0, y < 0)
-        sage: bool(x*y < 0)      # means definitely true
+        sage: (x*y < 0).holds()      # means definitely true
         True
-        sage: bool(x*y > 0)      # might not be true
+        sage: (x*y > 0).holds()      # might not be true
         False
         sage: forget()    # implicitly calls _forget_all
-        sage: bool(x*y < 0)      # might not be true
+        sage: (x*y < 0).holds()      # might not be true
         False
-        sage: bool(x*y > 0)      # might not be true
+        sage: (x*y > 0).holds()      # might not be true
         False
 
     TESTS:
diff --git a/src/sage/symbolic/expression.pyx b/src/sage/symbolic/expression.pyx
index 7cfd4d2..e72e6df 100644
--- a/src/sage/symbolic/expression.pyx
+++ b/src/sage/symbolic/expression.pyx
@@ -1648,19 +1648,19 @@ cdef class Expression(CommutativeRingElement):
 
             sage: (x > 2).assume()
 
-        Bool returns True below if the inequality is *definitely* known to
+        ``holds()`` returns True below if the inequality is *definitely* known to
         be True.
 
         ::
 
-            sage: bool(x > 0)
+            sage: (x > 0).holds()
             True
-            sage: bool(x < 0)
+            sage: (x < 0).holds()
             False
 
-        This may or may not be True, so bool returns False::
+        This may or may not be True, so ``holds()`` returns False::
 
-            sage: bool(x > 3)
+            sage: (x > 3).holds()
             False
 
         If you make inconsistent or meaningless assumptions,
@@ -2251,18 +2251,17 @@ cdef class Expression(CommutativeRingElement):
             sage: SR(1./2^10000).is_trivial_zero()
             False
 
-        The :meth:`~sage.structure.element.Element.is_zero` method
-        is more capable::
+        The :meth:`holds` method is more capable::
 
             sage: t = pi + (pi - 1)*pi - pi^2
             sage: t.is_trivial_zero()
             False
-            sage: t.is_zero()
+            sage: (t==0).holds()
             True
             sage: u = sin(x)^2 + cos(x)^2 - 1
             sage: u.is_trivial_zero()
             False
-            sage: u.is_zero()
+            sage: (u==0).holds()
             True
         """
         return self._gobj.is_zero()
diff --git a/src/sage/tests/french_book/calculus_doctest.py b/src/sage/tests/french_book/calculus_doctest.py
index 4f4029f..a1aafe9 100644
--- a/src/sage/tests/french_book/calculus_doctest.py
+++ b/src/sage/tests/french_book/calculus_doctest.py
@@ -8,7 +8,7 @@ Tests extracted from ./calculus.tex.
 
 Sage example in ./calculus.tex, line 37::
 
-    sage: bool(x^2 + 3*x + 1 == (x+1)*(x+2))
+    sage: (x^2 + 3*x + 1 == (x+1)*(x+2)).holds()
     False
 
 Sage example in ./calculus.tex, line 74::
@@ -27,7 +27,7 @@ Sage example in ./calculus.tex, line 74::
 Sage example in ./calculus.tex, line 91::
 
     sage: x, y, z = var('x, y, z') ; q = x*y + y*z + z*x
-    sage: bool(q(x=y, y=z, z=x) == q), bool(q(z=y)(y=x) == 3*x^2)
+    sage: (q(x=y, y=z, z=x) == q).holds(), (q(z=y)(y=x) == 3*x^2).holds()
     (True, True)
 
 Sage example in ./calculus.tex, line 99::
@@ -106,9 +106,9 @@ Sage example in ./calculus.tex, line 318::
 
 Sage example in ./calculus.tex, line 371::
 
-    sage: assume(x > 0); bool(sqrt(x^2) == x)
+    sage: assume(x > 0); (sqrt(x^2) == x).holds()
     True
-    sage: forget(x > 0); bool(sqrt(x^2) == x)
+    sage: forget(x > 0); (sqrt(x^2) == x).holds()
     False
     sage: n = var('n'); assume(n, 'integer'); sin(n*pi).simplify()
     0
@@ -150,7 +150,7 @@ Sage example in ./calculus.tex, line 460::
 
     sage: c.simplify_trig()
     0
-    sage: c.is_zero()
+    sage: (c == 0).holds()
     True
 
 Sage example in ./calculus.tex, line 516::
diff --git a/src/sage/tests/french_book/domaines_doctest.py b/src/sage/tests/french_book/domaines_doctest.py
index f8a15b8..5825349 100644
--- a/src/sage/tests/french_book/domaines_doctest.py
+++ b/src/sage/tests/french_book/domaines_doctest.py
@@ -261,7 +261,7 @@ Sage example in ./domaines.tex, line 623::
 Sage example in ./domaines.tex, line 679::
 
     sage: x, y = var('x, y')
-    sage: bool( (x-y)*(x+y) == x^2-y^2 )
+    sage: ( (x-y)*(x+y) == x^2-y^2 ).holds()
     True
 
 Sage example in ./domaines.tex, line 697::
@@ -368,7 +368,7 @@ Sage example in ./domaines.tex, line 914::
     # machines we get a negative sign
     sage: x1, x2, x3, x4 = SR.var('x1, x2, x3, x4')
     sage: p = prod( (a-b) for (a,b) in Subsets([x1,x2,x3,x4],2) )
-    sage: bool(p == (x1 - x2)*(x1 - x3)*(x1 - x4)*(x2 - x3)*(x2 - x4)*(x3 - x4)) or bool(p == -(x1 - x2)*(x1 - x3)*(x1 - x4)*(x2 - x3)*(x2 - x4)*(x3 - x4))
+    sage: (p == (x1 - x2)*(x1 - x3)*(x1 - x4)*(x2 - x3)*(x2 - x4)*(x3 - x4)).holds() or (p == -(x1 - x2)*(x1 - x3)*(x1 - x4)*(x2 - x3)*(x2 - x4)*(x3 - x4)).holds()
     True
 
 Sage example in ./domaines.tex, line 938::
diff --git a/src/sage/tests/french_book/recequadiff.py b/src/sage/tests/french_book/recequadiff.py
index a7ac743..d55aded 100644
--- a/src/sage/tests/french_book/recequadiff.py
+++ b/src/sage/tests/french_book/recequadiff.py
@@ -131,7 +131,7 @@ Sage example in ./recequadiff.tex, line 408::
   sage: for k in range(1,20,2):
   ...       P += plot(solve(ed, y)[0].subs(c==1+k/4).rhs(), x, -3, 3)
   sage: P
-  Graphics object consisting of 11 graphics primitives
+  Graphics object consisting of 10 graphics primitives
 
 Sage example in ./recequadiff.tex, line 426::
 
--
cgit v0.9.2
